plot(x,HowBadIsIt(rep(0.67,length(x)),x/100),type="l",log="y"
,
xlab = "percentage of arrests / citations etc that involve blacks",
ylab = "how much more likely",
main="How bad it is",
ylim=c(1,12)
)
points(85,HowBadIsIt(0.67,0.85),cex=2,pch=16,col="red")
points(95,HowBadIsIt(0.67,0.95),cex=2,pch=16,col="red")
arrows(79,5,84,3)
text(79,7,"vehicle stops:")
text(79,6,"2.8 times more likely")
arrows(89,9.3,94,9.3)
text(85,11,"manner of walking:")
text(85,9,"9.3 times more likely")
plot(x,HowBadIsIt(rep(0.67,length(x)),x/100),type="l",log="y"
,
xlab = "percentage of arrests / citations etc that involve blacks",
ylab = "how much more likely",
main="How bad it is",
ylim=c(1,12)
)
points(85,HowBadIsIt(0.67,0.85),cex=2,pch=16,col="red")
points(95,HowBadIsIt(0.67,0.95),cex=2,pch=16,col="red")
arrows(79,5,84,3)
text(79,7,"vehicle stops:")
text(79,6,"2.8 times more likely")
arrows(89,9.3,94,9.3)
text(85,11,"manner of walking:")
text(85,9.5,"9.3 times more likely")
plot(x,HowBadIsIt(rep(0.67,length(x)),x/100),type="l",log="y"
,
xlab = "percentage of arrests / citations etc that involve blacks",
ylab = "how much more likely",
main="How bad it is",
ylim=c(1,12)
)
points(85,HowBadIsIt(0.67,0.85),cex=2,pch=16,col="red")
points(95,HowBadIsIt(0.67,0.95),cex=2,pch=16,col="red")
arrows(79,5,84,3)
text(79,7,"vehicle stops:")
text(79,6,"2.8 times more likely")
arrows(89,11,94,9.3)
text(85,11,"manner of walking:")
text(85,9.5,"9.3 times more likely")
plot(x,HowBadIsIt(rep(0.67,length(x)),x/100),type="l",log="y"
,
xlab = "percentage of arrests / citations etc that involve blacks",
ylab = "how much more likely",
main="How bad it is",
ylim=c(1,12)
)
points(85,HowBadIsIt(0.67,0.85),cex=2,pch=16,col="red")
points(95,HowBadIsIt(0.67,0.95),cex=2,pch=16,col="red")
arrows(79,5,84,3)
text(79,7,"vehicle stops:")
text(79,6,"2.8 times more likely")
arrows(89,11,94,9.4)
text(85,11,"manner of walking:")
text(85,9.5,"9.3 times more likely")
x=100*seq(0.67,1,0.01)
plot(x,HowBadIsIt(rep(0.67,length(x)),x/100),type="l",log="y"
,
xlab = "percentage of arrests / citations etc that involve blacks",
ylab = "how much more likely",
main="How bad it is",
ylim=c(1,12)
)
points(85,HowBadIsIt(0.67,0.85),cex=2,pch=16,col="red")
points(95,HowBadIsIt(0.67,0.95),cex=2,pch=16,col="red")
arrows(79,5,84,3)
text(79,7,"vehicle stops:")
text(79,6,"2.8 times more likely")
arrows(91,11,94,9.4)
text(85,11,"manner of walking:")
text(85,9.5,"9.3 times more likely")
arrows(90,11,94,9.4)
text(85,11,"manner of walking:")
text(85,9.5,"9.3 times more likely")
?png
png(filename = "Ferguson.png")
x=100*seq(0.67,1,0.01)
plot(x,HowBadIsIt(rep(0.67,length(x)),x/100),type="l",log="y"
,
xlab = "percentage of arrests / citations etc that involve blacks",
ylab = "how much more likely",
main="How bad it is",
ylim=c(1,12)
)
points(85,HowBadIsIt(0.67,0.85),cex=2,pch=16,col="red")
points(95,HowBadIsIt(0.67,0.95),cex=2,pch=16,col="red")
arrows(79,5,84,3)
text(79,7,"vehicle stops:")
text(79,6,"2.8 times more likely")
arrows(90,11,94,9.4)
text(85,11,"manner of walking:")
text(85,9.5,"9.3 times more likely")
dev.off()
png(filename = "Ferguson.png")
x=100*seq(0.67,1,0.01)
plot(x,HowBadIsIt(rep(0.67,length(x)),x/100),type="l",log="y"
,
xlab = "percentage of arrests / citations etc that involve blacks",
ylab = "how much more likely",
main="How bad it is",
ylim=c(1,12)
)
points(85,HowBadIsIt(0.67,0.85),cex=2,pch=16,col="red")
points(95,HowBadIsIt(0.67,0.95),cex=2,pch=16,col="red")
arrows(79,5,84,3)
text(79,6.5,"vehicle stops:")
text(79,5.8,"2.8 times more likely")
arrows(90,11,94,9.4)
text(85,11,"manner of walking:")
text(85,9.5,"9.3 times more likely")
dev.off()
png(filename = "Ferguson.png")
x=100*seq(0.67,1,0.01)
plot(x,HowBadIsIt(rep(0.67,length(x)),x/100),type="l",log="y"
,
xlab = "percentage of arrests / citations etc that involve blacks",
ylab = "how much more likely",
main="How bad it is",
ylim=c(1,12)
)
points(85,HowBadIsIt(0.67,0.85),cex=2,pch=16,col="red")
points(95,HowBadIsIt(0.67,0.95),cex=2,pch=16,col="red")
arrows(79,5,84,3)
text(79,6.,"vehicle stops:")
text(79,5.5,"2.8 times more likely")
arrows(90,11,94,9.4)
text(85,11,"manner of walking:")
text(85,9.5,"9.3 times more likely")
dev.off()
png(filename = "Ferguson.png")
x=100*seq(0.67,1,0.01)
plot(x,HowBadIsIt(rep(0.67,length(x)),x/100),type="l",log="y"
,
xlab = "percentage of arrests / citations etc that involve blacks",
ylab = "how much more likely",
main="How bad it is",
ylim=c(1,12)
)
points(85,HowBadIsIt(0.67,0.85),cex=2,pch=16,col="red")
points(95,HowBadIsIt(0.67,0.95),cex=2,pch=16,col="red")
arrows(79,5,84,3)
text(79,6.,"vehicle stops:")
text(79,5.2,"2.8 times more likely")
arrows(90,11,94,9.4)
text(85,11,"manner of walking:")
text(85,9.5,"9.3 times more likely")
dev.off()
png(filename = "Ferguson.png")
x=100*seq(0.67,1,0.01)
plot(x,HowBadIsIt(rep(0.67,length(x)),x/100),type="l",log="y"
,
xlab = "percentage of arrests / citations etc that involve blacks",
ylab = "how much more likely",
main="How bad it is",
ylim=c(1,12)
)
points(85,HowBadIsIt(0.67,0.85),cex=2,pch=16,col="red")
points(95,HowBadIsIt(0.67,0.95),cex=2,pch=16,col="red")
arrows(79,4.8,84,3)
text(79,6.,"vehicle stops:")
text(79,5.2,"2.8 times more likely")
arrows(90,10.7,94,9.4)
text(85,11,"manner of walking:")
text(85,9.5,"9.3 times more likely")
dev.off()
14/17
12/82
82/15
(14/12)/(3/70)
4*ln(1000)/1000
log()
?log
4*log(1000)/1000
4*log(4*0.1*1000000)/4*0.1*10000000
4*log(4*0.1*1000000)/(4*0.1*10000000)
4*log(4*0.1*1000000)/(4*0.1*10000000)*1000000
4*log(4*0.1*1000000)/(4*0.1*1000000)
4*log(4*0.1*1000000)/(4*0.1*1000000)*1000000
4*log(4*0.01*1000000)/(4*0.01*1000000)*1000000
4*log(4*0.01*1000000)/(4*0.01*1000000)
library(seqinr)
help("library")
help("library")
getncbiseq <- function(accession)
{
require("seqinr") # this function requires the SeqinR R package
# first find which ACNUC database the accession is stored in:
dbs <- c("genbank","refseq","refseqViruses","bacterial")
numdbs <- length(dbs)
for (i in 1:numdbs)
{
db <- dbs[i]
choosebank(db)
# check if the sequence is in ACNUC database 'db':
resquery <- try(query(".tmpquery", paste("AC=", accession)), silent = TRUE)
if (!(inherits(resquery, "try-error")))
{
queryname <- "query2"
thequery <- paste("AC=",accession,sep="")
query(`queryname`,`thequery`)
# see if a sequence was retrieved:
seq <- getSequence(query2$req[[1]])
closebank()
return(seq)
}
closebank()
}
print(paste("ERROR: accession",accession,"was not found"))
}
dengueseq <- getncbiseq("NC_001477")
dbs <- c("genbank","refseq","refseqViruses","bacterial")
numdbs <- length(dbs)
i = 1
db <- dbs[i]
choosebank(db)
resquery <- try(query(".tmpquery", paste("AC=", accession)), silent = TRUE)
if (!(inherits(resquery, "try-error")))
{
queryname <- "query2"
thequery <- paste("AC=",accession,sep="")
query(`queryname`,`thequery`)
# see if a sequence was retrieved:
seq <- getSequence(query2$req[[1]])
closebank()
return(seq)
}
queryname
resquery
accession = "NC_001477"
resquery <- try(query(".tmpquery", paste("AC=", accession)), silent = TRUE)
resquery
".tmpquery"
paste("AC=", accession)
?query
choosebank("genbank")
bb <- query("bb", "sp=Borrelia burgdorferi")
bb
choosebank("genbank")
query("bb", "AC= NC_001477")
query("AC=NC_001477")
query("bb",AC="NC_001477")
query("bb","AC=NC_001477")
query("bb","ac=NC_001477")
query("Dengue1", "AC=NC_001477")
query("Dengue1", "AC=NC_001475")
query("bb", "sp=Borrelia burgdorferi")
bb
attributes(bb)
attributes(bb,"call")
attributes(bb)$names
bb[[1]]
bb[[2]]
bb[[3]]
bb[[4]]
bb[[5]]
attributes(bb)
query("bb", "sp=Borrelia burgdorferi",verbose=TRUE)
query("bb", "ac=nc_001477",verbose=TRUE)
query("bb", "sp=nc_001477",verbose=TRUE)
query("bb", "sp=Dengue",verbose=TRUE)
query("bb", "sp=n001477",verbose=TRUE)
query("bb", "ac=001477",verbose=TRUE)
query("bb", "ac=77",verbose=TRUE)
7*3*2.5*15
a
a<-"x"
typeof(x)
typeof(a)
x
source('~/.active-rstudio-document', echo=TRUE)
library(seqinr)
diamonds
data(diamonds)
library(ggplot2)
data(diamonds)
ggplot(aes(x=price,y=x),data=diamonds)+
ggplot(aes(x=price,y=x),data=diamonds))+
ggplot(aes(x=price,y=x),data=diamonds)
ggplot(aes(x=price,y=x),data=diamonds)+geom_point()
ggplot(aes(x=price,y=x),data=diamonds)
+geom_point()
ggplot(aes(x=price,y=x),data=diamonds)+
geom_point()
cor.test(diamonds$x,diamonds$price)
cor.test(diamonds$price,diamonds$x)
cor.test(diamonds$price,diamonds$x)
cor.test(diamonds$y,diamonds$price)
cor.test(diamonds$z,diamonds$price)
ggplot(aes(x=price,y=depth),data=diamonds)+
geom_point()
ggplot(data = diamonds, aes(x = depth, y = price)) +
geom_point(alpha=1/100)
qplot(carat, price, data=diamonds,
colour=color)
ggplot(data = diamonds, aes(x = depth, y = price)) +
geom_point(alpha=1/100)+
scale_x_continuous(breaks = 1:10)
range(diamonds$depth)
ggplot(data = diamonds, aes(x = depth, y = price)) +
geom_point(alpha=1/100)+
scale_x_continuous(breaks = seq(43,79,by=2))
cor.test(diamonds$depth,diamonds$price)
scale_x_continuous(breaks = 1:10)
?subset
?quantile
subset(diamonds,price<=quantile(price,probs=99)
head(subset(diamonds,price<=quantile(price,probs=99))
)
head(subset(diamonds,price<=quantile(price,probs=.99))
)
head(subset(diamonds,price<=quantile(price,probs=.99)))
length(subset(diamonds,price<=quantile(price,probs=.99)))[,1]
length(subset(diamonds,price<=quantile(price,probs=.99))[,1])
length(diamonds[,1])
ggplot(data = subset(diamonds,price<=quantile(price,probs=.99), aes(x = price, y = carat)) +
geom_point(alpha=1/100)+
scale_x_continuous(breaks = seq(43,79,by=2))
ggplot(data = subset(diamonds,price<=quantile(price,probs=.99)), aes(x = price, y = carat)) +
geom_point(alpha=1/100)+
scale_x_continuous(breaks = seq(43,79,by=2))
ggplot(data = subset(diamonds,price<=quantile(price,probs=.99)&carat<=quantile(carat,probs=.99)), aes(x = price, y = carat)) +
geom_point(alpha=1/100)+
scale_x_continuous(breaks = seq(43,79,by=2))
ggplot(data = subset(diamonds,price<=quantile(price,probs=.99)&carat<=quantile(carat,probs=.99)), aes(x = price, y = carat)) +
geom_point(alpha=1/100)
diamonds$volume<-diamonds$x*diamonds$y*diamonds$z
ggplot(data = diamonds, aes(x = price, y = volume)) +
geom_point(alpha=1/100)
ggplot(data = diamonds, aes(x = volume, y = price)) +
geom_point(alpha=1/100)
ggplot(data = diamonds, aes(x = volume, y = price))
ggplot(data = diamonds, aes(x = volume, y = price)) +
geom_point()
length(which(diamonds$volume==0))
count(diamonds$volume==0)
library(plyr)
count(diamonds$volume==0)
detach("package:plyr", unload=TRUE)
?cor.test
d <-subset(diamonds, volume!=0 & price<800)
cor.test(d$volume,d$price)
d <-subset(diamonds, volume!=0 & volume<800)
cor.test(d$volume,d$price)
ggplot(data = d, aes(x = volume, y = price)) +
geom_point(alpha=0.05)
ggplot(data = d, aes(x = volume, y = price)) +
geom_point(alpha=0.05)+
geom_smooth(linear)
ggplot(data = d, aes(x = volume, y = price)) +
geom_point(alpha=0.05)+
geom_smooth(method = "lm", formula = y ~ x, size = 1)
6.68*10^-4*9.5
300/14
768/3
887.70+903.45+878.40+840.4+903.45+903.45+871.92+871.92+840.4+840.4+840.4+840.4+840.4
871.92+871.92+919.2+934.96+919.2+871.92+966.48+871.92+903.45+919.2+919.2+871.92+919.2
13*85
3500/30
5*85
x<-1:12y<-1:12plot(x,y)
x<-1:12;y<-1:12plot(x,y)
x<-1:12
y<-1:12
plot(x,y)
)
abline(v=10 )
abline(h=10 )
barplot(x)
barplot(y)
barplot(c(x,y))
?c
barplot(cbind(x,y))
barplot(rbind(x,y))
rbind(x,y)
WorldPhones
list.files()
library(seqinr)
list.files()
plot(x,y)
swirl()
library(swirl)
swirl()
x
x[1:10]
x[is.na(x)]
x[!is.na(x)]
y<-x[!is.na(x)]
y
y[y>0]
exit
exit()
q()
600000*10^6*10^-9*4
600000*10^4*10^-9*4
416.66*12
971*1.865
971*1.0865
1054*29
2068*3
1054*13
30566+6204+13702
1054*9
2068*2
2068*7.66
6.66*1246
1054/5*2
421*6.66*4.33
9486+8298+12140
105+57+34
45*1.77
45*1.77*1.55*3
33750/45000
7771/17206
s1=1
s2=0.5
mu=0.0001
(mu/s1 + mu/s2)/2
fm=(mu/s1 + mu/s2)/2
mu/fm
(s1+s2)/2
1/(1/(s1+s2))/2
83-48
35/83
58-25
33/58
52-13
39/52
52-17
35/52
14/64
2/48
1400*8
90000/12
setwd("~/Documents/Git/bachelerProject/Rscripts")
source('./baseRscript.R')
library(scales)
library(plotrix)
read.table("../Output/freqPatTs_Zanini.csv",sep=",",header=TRUE,row.names=1)->freqPatTsZanini
colMeansTsZanini<-apply(freqPatTsZanini, 2 , mean, na.rm=TRUE)
head(colMeansTsZanini)
numsitesZanini<-length(colMeansTsZanini)
OverviewDFZanini<-data.frame(num=1:numsitesZanini,colMeansTsZanini)
OverviewDFZanini$TypeOfSite<-TypeOfSite[1:numsitesZanini]
OverviewDFZanini$TypeOfSite[1:39]<-"overlap"
OverviewDFZanini$TypeOfSite[which(consensusB != consensusC | consensusC != consensus01AE)]<-"exclude"
OverviewDFZanini$WTnt<-consensusB[1:numsitesZanini]
read.csv("../Data/HIVMutRates/HIVMutRates.csv")->mutrates
OverviewDFZanini$TSmutrate<-0
OverviewDFZanini$TSmutrate[OverviewDFZanini$WTnt=="a"]<-mutrates$Probability[mutrates$Nucleotide.substitution=="AG"]
OverviewDFZanini$TSmutrate[OverviewDFZanini$WTnt=="c"]<-mutrates$Probability[mutrates$Nucleotide.substitution=="CU"]
OverviewDFZanini$TSmutrate[OverviewDFZanini$WTnt=="g"]<-mutrates$Probability[mutrates$Nucleotide.substitution=="GA"]
OverviewDFZanini$TSmutrate[OverviewDFZanini$WTnt=="t"]<-mutrates$Probability[mutrates$Nucleotide.substitution=="UC"]
for (i in 1:984){
OverviewDFZanini$EstSelCoeff[i] = EstimatedS(OverviewDFZanini$TSmutrate[i],OverviewDFZanini$colMeansTsZanini[i])}
head(OverviewDFZanini$EstSelCoeff)
which(OverviewDFZanini$EstSelCoeff==1)
setwd("~/Documents/Git/bachelerProject/Rscripts")
source('./baseRscript.R')
library(scales)
library(plotrix)
if (TRUE){#read the stored data
read.table("../Output/freqPatTs_LehmanRT.csv",sep=",",header=TRUE,row.names=1)->freqPatTsLehman
}
colMeansTsLehman<-apply(freqPatTsLehman, 2 , mean, na.rm=TRUE)
numsitesLehman<-length(colMeansTsLehman)
OverviewDFLehman<-data.frame(num=1:(297+numsitesLehman),colMeansTsLehman=c(rep(NA,297),colMeansTsLehman))
OverviewDFLehman$TypeOfSite<-TypeOfSite[1:(297+numsitesLehman)]
OverviewDFLehman$TypeOfSite[1:39]<-"overlap"
#remove sites that are different between A and B subtypes
OverviewDFLehman$TypeOfSite[which(consensusB != consensusC | consensusA != consensusB)]<-"exclude"
#remove sites with no data
OverviewDFLehman$TypeOfSite[which(is.na(OverviewDFLehman$colMeansTsLehman))]<-"exclude"
OverviewDFLehman$WTnt<-consensusB[1:(297+numsitesLehman)]
read.csv("../Data/HIVMutRates/HIVMutRates.csv")->mutrates
OverviewDFLehman$TSmutrate<-0; OverviewDFLehman$EstSelCoeff<-0
OverviewDFLehman$TSmutrate[OverviewDFLehman$WTnt=="a"]<-mutrates$Probability[mutrates$Nucleotide.substitution=="AG"]
OverviewDFLehman$TSmutrate[OverviewDFLehman$WTnt=="c"]<-mutrates$Probability[mutrates$Nucleotide.substitution=="CU"]
OverviewDFLehman$TSmutrate[OverviewDFLehman$WTnt=="g"]<-mutrates$Probability[mutrates$Nucleotide.substitution=="GA"]
OverviewDFLehman$TSmutrate[OverviewDFLehman$WTnt=="t"]<-mutrates$Probability[mutrates$Nucleotide.substitution=="UC"]
for (i in 1:(297+numsitesLehman)){
#print(i)
if (is.na(OverviewDFLehman$colMeansTsLehman[i])){
OverviewDFLehman$EstSelCoeff[i]<-NA
} else {
OverviewDFLehman$EstSelCoeff[i] = EstimatedS(OverviewDFLehman$TSmutrate[i],OverviewDFLehman$colMeansTsLehman[i])
}
}
length(which(OverviewDFLehman$EstSelCoeff==1))
head(OverviewDFLehman)
which(grep("syn|stop", OverviewDFLehman$TypeOfSite))
grep("syn|stop", OverviewDFLehman$TypeOfSite)
length(grep("syn|stop", OverviewDFLehman$TypeOfSite)
)
which(OverviewDFLehman$EstSelCoeff[grep("syn|stop", OverviewDFLehman$TypeOfSite)]==1)
12/415
which(OverviewDFLehman$colMeansTsLehman[grep("syn|stop", OverviewDFLehman$TypeOfSite)]==0)
OverviewDFLehman[209,]
which(OverviewDFLehman$colMeansTsLehman==0)
which(OverviewDFLehman$EstSelCoeff==1)
OverviewDFLehman[719,]
which(OverviewDFZanini$EstSelCoeff==1)
mutrates
54+36
90*1.54
90*.54
54
54*(1.03^5)
